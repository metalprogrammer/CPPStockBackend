#ifndef STOCKDATAMANAGER_H
#define STOCKDATAMANAGER_H

#include <vector>

#include "stocklisting.h"
#include "stockdata.h"

template <typename KEY, typename VALUE, int SIZE>
class Cache
{
public:
    void UpdateEntry(KEY key_, VALUE val_)
    {
        int pos = PosOfKeyGet(key_);
        if(pos > -1)
        {
            enteries[i].val = val_;
        }
    }

    VALUE EntryGet(KEY);
private:
    struct CacheEntry
    {
        CacheEntry(VALUE _val):  val(_val){}
        CacheEntry(KEY _key, VALUE _val):key(_key), val(_val){}
        KEY key;
        VALUE val;
        int CacheHit{1};
    };
    
    int PosOfKeyGet(KEY key_)
    {
        for(int i = 0; i < SIZE; i++)
        {
            if(enteries[i].key == key_)
            {
                return i;
            }
        }
        return -1;
    }
    
    CacheEntry enteries[SIZE];
    

    
    
};

class StockDataManager
{
public:
    StockDataManager();

    std::string StockListJsonGet(std::string search);
    std::string StockDataJsonGet(std::string symbol);
    std::vector<StockListing*> search(std::string symbol);

private:
    std::vector<StockListing*> stockList;

};

#endif // STOCKDATAMANAGER_H
